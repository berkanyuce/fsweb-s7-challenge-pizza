"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var formPropsIns_1 = require("../formPropsIns");
var enumerations_1 = require("../../shared/enumerations");
function alwaysValid(data) {
    return new formPropsIns_1.DetailIns(null, data, true, null, null);
}
function has2Validate(validation, validType) {
    return !validation.skipValidationTypes.includes(validType);
}
var general = function (validation, detail, value, props) {
    var isValidAttr = function (validType) { return has2Validate(validation, validType); };
    props = props || {};
    value = value || '';
    if (!value) {
        if (isValidAttr(enumerations_1.ValidationType.required) && props.required) {
            return new formPropsIns_1.DetailIns(detail, value, false, 'required');
        }
        return new formPropsIns_1.DetailIns(detail, value, true, null);
    }
    if (isValidAttr(enumerations_1.ValidationType.minLength) && props.minLength && value && props.minLength > value.length) {
        return new formPropsIns_1.DetailIns(detail, value, false, 'minLength');
    }
    if (isValidAttr(enumerations_1.ValidationType.exactLength) && props.exactLength && value && props.exactLength > value.length) {
        return new formPropsIns_1.DetailIns(detail, value, false, 'exactLength');
    }
    if (isValidAttr(enumerations_1.ValidationType.min) && props.min && +props.min > +value) {
        return new formPropsIns_1.DetailIns(detail, value, false, 'min');
    }
    if (isValidAttr(enumerations_1.ValidationType.max) && props.max && +props.max < +value && (+value < 0)) {
        return new formPropsIns_1.DetailIns(detail, value, false, 'max');
    }
    return new formPropsIns_1.DetailIns(detail, value, true, null);
};
var forRestriction = function (validation, detail, value, props) {
    var isValidAttr = function (validType) { return has2Validate(validation, validType); };
    props = props || {};
    value = value || '';
    if (!value) {
        return new formPropsIns_1.DetailIns(detail, value, true, null);
    }
    if (isValidAttr(enumerations_1.ValidationType.maxLength) && props.maxLength && value && props.maxLength < value.length) {
        return new formPropsIns_1.DetailIns(detail, value, false, 'maxLength');
    }
    if (isValidAttr(enumerations_1.ValidationType.max) && props.max && +props.max < +value && (+value > 0)) {
        return new formPropsIns_1.DetailIns(detail, value, false, 'max');
    }
    if (isValidAttr(enumerations_1.ValidationType.pattern) && props.pattern && !(new RegExp(props.pattern).test(value))) {
        return new formPropsIns_1.DetailIns(detail, value, false, 'pattern');
    }
    return new formPropsIns_1.DetailIns(detail, value, true, null);
};
var formVali = { alwaysValid: alwaysValid, forRestriction: forRestriction, general: general };
exports.default = formVali;
//# sourceMappingURL=formVali.js.map