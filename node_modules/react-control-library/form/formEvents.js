"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var detailMode_1 = require("./detailMode");
var formVali_1 = __importDefault(require("./validation/formVali"));
var utility_1 = __importDefault(require("../shared/utility"));
var detailHasError = function (detail) { return !!(detail && !detail.isValid); };
var onChangeEvent = function (e, data, setData, onChangeCB, validation, detailModes, props, extractValueToValidate, setControlHasError, extractValueToSet) {
    var value = e.target.value;
    e.detail = null;
    var tempData = data || '';
    if (extractValueToSet) {
        var valueToSet = extractValueToSet(e, value);
        utility_1.default.setEventArgsValue(e, valueToSet);
        value = valueToSet.value;
        setData && setData(value);
    }
    var value4Validation = extractValueToValidate ? extractValueToValidate(e.target.value) : e.target.value;
    var detail = validation.controlSpecific && validation.controlSpecific(value4Validation);
    if (detail && !detail.isValid && validation.preventInput.includes(detailMode_1.DetailMode.onChange)) {
        utility_1.default.setEventArgsValue(e, tempData);
        setData(tempData);
        e.detail = detail;
        return;
    }
    var detailRestriction = formVali_1.default.forRestriction(validation, null, value4Validation, props);
    if (detailHasError(detailRestriction)) {
        utility_1.default.setEventArgsValue(e, tempData);
        setData(tempData);
        e.detail = detailRestriction;
        return;
    }
    if (!detailHasError(detail)) {
        var generalDetail = formVali_1.default.general(validation, null, value4Validation, props);
        if (generalDetail) {
            generalDetail.metadata = generalDetail.metadata || [];
            generalDetail.metadata = generalDetail.metadata.concat((detail === null || detail === void 0 ? void 0 : detail.metadata) || []);
            detail = generalDetail;
        }
    }
    e.detail = detail;
    setControlHasError(e.detail && !e.detail.isValid);
    setData && setData(e.target.value);
    onChangeCB && onChangeCB(e);
};
var onBlurEvent = function (e, data, setData, onBlurCB, validation, detailModes, props, extractValueToValidate, setControlHasError, extractValueToSet) {
    var value = e.target.value;
    e.detail = null;
    var tempData = data || '';
    if (extractValueToSet) {
        var valueToSet = extractValueToSet(e, value);
        utility_1.default.setEventArgsValue(e, valueToSet);
        value = valueToSet.value;
        setData && setData(value);
    }
    var value4Validation = extractValueToValidate ? extractValueToValidate(e.target.value) : e.target.value;
    var detail = validation.controlSpecific && validation.controlSpecific(value4Validation);
    if (detail && !detail.isValid && validation.preventInput.includes(detailMode_1.DetailMode.onChange)) {
        utility_1.default.setEventArgsValue(e, tempData);
        setData(tempData);
        e.detail = detail;
        return;
    }
    var detailRestriction = formVali_1.default.forRestriction(validation, null, value4Validation, props);
    if (detailHasError(detailRestriction)) {
        utility_1.default.setEventArgsValue(e, tempData);
        setData(tempData);
        e.detail = detailRestriction;
        return;
    }
    if (!detailHasError(detail)) {
        var generalDetail = formVali_1.default.general(validation, null, value4Validation, props);
        if (generalDetail) {
            generalDetail.metadata = generalDetail.metadata || [];
            generalDetail.metadata = generalDetail.metadata.concat((detail === null || detail === void 0 ? void 0 : detail.metadata) || []);
            detail = generalDetail;
        }
    }
    e.detail = detail;
    setControlHasError(e.detail && !e.detail.isValid);
    setData && setData(e.target.value);
    onBlurCB && onBlurCB(e);
};
var onKeyPressEvent = function (e, validation, onKeyPressCB, props, extractValueToValidate) {
    e.detail = null;
    if (validation.preventInput.includes(detailMode_1.DetailMode.onKeyPress)) {
        var detail = validation.controlSpecific && validation.controlSpecific(e.key);
        if (detail && !detail.isValid) {
            e.preventDefault();
            return;
        }
    }
    onKeyPressCB && onKeyPressCB(e);
};
var FormEvents = { onChangeEvent: onChangeEvent, onBlurEvent: onBlurEvent, onKeyPressEvent: onKeyPressEvent };
exports.default = FormEvents;
//# sourceMappingURL=formEvents.js.map