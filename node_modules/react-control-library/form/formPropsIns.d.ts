import { DetailMode } from './detailMode';
import { IPasswordCriteria, IPasswordFailure as IPasswordFail, IValidationProps } from '../shared/interfacesDelegates/controlInterfaces';
import { IDetail } from '../shared/interfacesDelegates/eventInterfaces';
import { ValidationType } from '../shared/enumerations';
export declare class ValidationIns implements IValidationProps {
    controlSpecific: ((data: any) => IDetail) | null;
    preventInput: DetailMode[];
    skipValidationTypes: ValidationType[];
    constructor(controlSpecific?: ((data: any) => IDetail) | null, preventInput?: DetailMode[], skipValidationTypes?: ValidationType[]);
}
export declare class DetailIns implements IDetail {
    constructor(detail: any, value: any, isValid?: boolean, attribute?: string | null, metadata?: any);
    detail: any;
    value: any;
    isValid: boolean;
    attribute: string | null;
    metadata: any;
}
export declare class PasswordCriteriaIns implements IPasswordCriteria {
    constructor(capital?: number, minLength?: number, maxLength?: number, numberCount?: number, symbols?: number, restrictSymbols?: string, sequence?: {
        number: number;
        characters: number;
    } | null);
    capital: number;
    minLength: number;
    maxLength: number;
    numberCount: number;
    symbols: number;
    sequence: {
        number: number;
        characters: number;
    };
    restrictSymbols: string;
}
export declare class PasswordFailIns implements IPasswordFail {
    constructor(attribute: string, value: any, message?: string | null, metadata?: any);
    attribute: string;
    value: any;
    message: string | null;
    metadata: any;
}
