"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PasswordFailIns = exports.PasswordCriteriaIns = exports.DetailIns = exports.ValidationIns = void 0;
var constants_1 = __importDefault(require("../shared/constants"));
var detailMode_1 = require("./detailMode");
var ValidationIns = (function () {
    function ValidationIns(controlSpecific, preventInput, skipValidationTypes) {
        if (controlSpecific === void 0) { controlSpecific = null; }
        if (preventInput === void 0) { preventInput = [detailMode_1.DetailMode.onChange, detailMode_1.DetailMode.onKeyPress]; }
        if (skipValidationTypes === void 0) { skipValidationTypes = []; }
        this.controlSpecific = controlSpecific;
        this.preventInput = preventInput;
        this.skipValidationTypes = skipValidationTypes;
    }
    return ValidationIns;
}());
exports.ValidationIns = ValidationIns;
var DetailIns = (function () {
    function DetailIns(detail, value, isValid, attribute, metadata) {
        if (isValid === void 0) { isValid = true; }
        if (attribute === void 0) { attribute = constants_1.default.userInput; }
        if (metadata === void 0) { metadata = null; }
        this.detail = detail;
        this.value = value;
        this.isValid = !!isValid;
        this.attribute = !!isValid ? null : attribute;
        this.metadata = metadata;
    }
    return DetailIns;
}());
exports.DetailIns = DetailIns;
var PasswordCriteriaIns = (function () {
    function PasswordCriteriaIns(capital, minLength, maxLength, numberCount, symbols, restrictSymbols, sequence) {
        if (capital === void 0) { capital = 1; }
        if (minLength === void 0) { minLength = 8; }
        if (maxLength === void 0) { maxLength = 0; }
        if (numberCount === void 0) { numberCount = 1; }
        if (symbols === void 0) { symbols = 1; }
        if (restrictSymbols === void 0) { restrictSymbols = ''; }
        if (sequence === void 0) { sequence = null; }
        this.capital = capital;
        this.minLength = minLength;
        this.maxLength = maxLength;
        this.numberCount = numberCount;
        this.symbols = symbols;
        this.sequence = sequence || { number: 0, characters: 0 };
        this.restrictSymbols = restrictSymbols;
    }
    return PasswordCriteriaIns;
}());
exports.PasswordCriteriaIns = PasswordCriteriaIns;
var PasswordFailIns = (function () {
    function PasswordFailIns(attribute, value, message, metadata) {
        if (message === void 0) { message = null; }
        if (metadata === void 0) { metadata = null; }
        this.attribute = attribute;
        this.value = value;
        this.message = message;
        this.metadata = metadata;
    }
    return PasswordFailIns;
}());
exports.PasswordFailIns = PasswordFailIns;
//# sourceMappingURL=formPropsIns.js.map