"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var type_check_utility_1 = require("type-check-utility");
var utility_1 = __importDefault(require("../shared/utility"));
var constants_1 = __importDefault(require("../shared/constants"));
function getBooleanControlClassName(data, originalClassName, prefix, baseKey, indeterminate) {
    if (indeterminate === void 0) { indeterminate = false; }
    var id = baseKey ? baseKey + "_" : '';
    var checkedCn = '';
    if (indeterminate) {
        checkedCn = "" + id + prefix + "_indeterminate";
    }
    else if (data) {
        checkedCn = "" + id + prefix + "_checked";
    }
    var cn = (checkedCn + " " + (originalClassName || '')).trim();
    return cn;
}
function getDefaultValue(props) {
    if (type_check_utility_1.isDefined(props.value))
        return props.value;
    if (type_check_utility_1.isDefined(props.checked))
        return props.checked;
    return '';
}
function backspaceDoNotDelete(e, conditionToOnlyMoveBack) {
    if (e.keyCode !== constants_1.default.ascii.backspace) {
        return false;
    }
    var cursorStart = utility_1.default.cursor(e).cursorStart;
    var projectedStart = cursorStart - 1;
    if (projectedStart < 0)
        return;
    if (conditionToOnlyMoveBack(projectedStart)) {
        e.target.selectionStart = projectedStart;
        e.target.selectionEnd = projectedStart;
        e.preventDefault();
        return;
    }
}
function getEachValidCharacter(data, validateFunc, isValidateFuncValid) {
    if (isValidateFuncValid === void 0) { isValidateFuncValid = true; }
    if (!type_check_utility_1.isDefined(data))
        return data;
    var result = '';
    for (var i = 0; i < data.length; i++) {
        var el = data[i];
        var isCharValid = validateFunc(el);
        if (isValidateFuncValid) {
            if (isCharValid) {
                result += el;
            }
        }
        else {
            if (!isCharValid) {
                result += el;
            }
        }
    }
    return result;
}
var formUtility = {
    getBooleanControlClassName: getBooleanControlClassName, getDefaultValue: getDefaultValue, getEachValidCharacter: getEachValidCharacter, backspaceDoNotDelete: backspaceDoNotDelete
};
exports.default = formUtility;
//# sourceMappingURL=formUtility.js.map