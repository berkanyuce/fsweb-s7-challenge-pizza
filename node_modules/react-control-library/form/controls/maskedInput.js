"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = __importDefault(require("react"));
var maskUtility_1 = __importDefault(require("../../shared/maskUtility"));
var type_check_utility_1 = require("type-check-utility");
var utility_1 = __importDefault(require("../../shared/utility"));
var customInput_1 = __importDefault(require("./customInput"));
var formPropsIns_1 = require("../formPropsIns");
var formVali_1 = __importDefault(require("../validation/formVali"));
var formUtility_1 = __importDefault(require("../formUtility"));
var MaskedInput = function (_a) {
    var _b = _a.mask, mask = _b === void 0 ? [] : _b, extractValueToSet = _a.extractValueToSet, props = __rest(_a, ["mask", "extractValueToSet"]);
    function changeEvent(e) {
        var toMaskResult = maskUtility_1.default.toMaskWithCursor(e, mask);
        maskUtility_1.default.updateEventArgs(e, toMaskResult);
        maskUtility_1.default.updateDetail(e, mask);
        props.onChange && props.onChange(e);
    }
    function onBlur(e) {
        maskUtility_1.default.updateDetail(e, mask);
        props.onBlur && props.onBlur(e);
    }
    function keyPressEvent(e) {
        if (mask.length === 0) {
            props.onKeyPress && props.onKeyPress(e);
            return;
        }
        var _a = utility_1.default.cursor(e), start = _a.cursorStart, newLengthIsPermitted = _a.newLengthIsPermitted;
        if (newLengthIsPermitted >= mask.length) {
            e.preventDefault();
            props.onKeyPress && props.onKeyPress(e);
            return;
        }
        while (true) {
            if (start >= mask.length) {
                e.preventDefault();
                break;
            }
            var m = mask[start];
            if (type_check_utility_1.isRegex(m)) {
                var reg = m;
                if (!reg.test(e.key)) {
                    e.preventDefault();
                }
                break;
            }
            else {
                start++;
            }
        }
        props.onKeyPress && props.onKeyPress(e);
    }
    function extractValueToSetLocal(e, value) {
        var valueWithCursor = maskUtility_1.default.toMaskWithCursor(e || { target: { value: value } }, mask);
        return valueWithCursor;
    }
    function keyDownEvent(e) {
        var conditionToOnlyMoveBack = function (index) {
            var arr = utility_1.default.strings2FlatArray(maskUtility_1.default.extractConstFromMask(mask));
            return arr.includes(e.target.value[index]);
        };
        formUtility_1.default.backspaceDoNotDelete(e, conditionToOnlyMoveBack);
    }
    var params = {
        validation: new formPropsIns_1.ValidationIns(formVali_1.default.alwaysValid),
        onBlur: onBlur,
        onChange: changeEvent,
        extractValueToValidate: function (value) { return maskUtility_1.default.extractPureValue(value, mask); },
        onKeyPress: keyPressEvent,
        onKeyDown: keyDownEvent
    };
    return (react_1.default.createElement(customInput_1.default, __assign({ extractValueToSet: extractValueToSet || extractValueToSetLocal }, props, params)));
};
exports.default = MaskedInput;
//# sourceMappingURL=maskedInput.js.map