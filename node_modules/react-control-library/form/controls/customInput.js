"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = __importDefault(require("react"));
var detailMode_1 = require("../detailMode");
var formEvents_1 = __importDefault(require("../formEvents"));
var formPropsIns_1 = require("../formPropsIns");
var appSettings_1 = __importDefault(require("../../shared/appSettings"));
var CustomInput = function (_a) {
    var setReference = _a.setReference, inputTag = _a.inputTag, validation = _a.validation, type = _a.type, value = _a.value, className = _a.className, onKeyPress = _a.onKeyPress, onChange = _a.onChange, onBlur = _a.onBlur, _b = _a.detailModes, detailModes = _b === void 0 ? [detailMode_1.DetailMode.onBlur, detailMode_1.DetailMode.onChange] : _b, exactLength = _a.exactLength, extractValueToValidate = _a.extractValueToValidate, extractValueToSet = _a.extractValueToSet, hasError = _a.hasError, props = __rest(_a, ["setReference", "inputTag", "validation", "type", "value", "className", "onKeyPress", "onChange", "onBlur", "detailModes", "exactLength", "extractValueToValidate", "extractValueToSet", "hasError"]);
    var inputRef = react_1.default.useRef();
    var _c = react_1.default.useState(value), data = _c[0], setData = _c[1];
    var _d = react_1.default.useState(hasError || false), controlHasError = _d[0], setControlHasError = _d[1];
    var InputTag = inputTag;
    var onBlurEvent = formEvents_1.default.onBlurEvent, onChangeEvent = formEvents_1.default.onChangeEvent, onKeyPressEvent = formEvents_1.default.onKeyPressEvent;
    react_1.default.useEffect(function () { return setControlHasError(hasError || false); }, [hasError]);
    react_1.default.useEffect(function () {
        setReference && setReference(getInputRef);
    }, []);
    react_1.default.useEffect(function () {
        var newVal = extractValueToValidate ? extractValueToValidate(value) : value;
        if (extractValueToSet) {
            var valueToSet = extractValueToSet(null, newVal);
            newVal = valueToSet.value;
            if (validation && validation.controlSpecific) {
                var detail = validation.controlSpecific(newVal);
                if (!detail.isValid) {
                    newVal = '';
                }
            }
        }
        setData(newVal);
    }, [value]);
    var changeEvent = function (e) { return onChange && onChange(e); };
    var getInputRef = function () { return inputRef; };
    var consolidatedProps = __assign({ type: type, exactLength: exactLength }, props);
    var validationParam = validation || new formPropsIns_1.ValidationIns();
    var cn = controlHasError ? appSettings_1.default.error.defaultControlError : '';
    var _e = __assign({ type: type || 'text', className: cn + " " + (className || ''), onChange: function (e) {
            onChangeEvent(e, data, setData, changeEvent, validationParam, detailModes, consolidatedProps, extractValueToValidate, setControlHasError, extractValueToSet);
        }, onBlur: function (e) { return onBlurEvent(e, data, setData, onBlur, validationParam, detailModes, consolidatedProps, extractValueToValidate, setControlHasError, extractValueToSet); }, onKeyPress: function (e) { return onKeyPressEvent(e, validationParam, onKeyPress, consolidatedProps, extractValueToValidate); }, value: data, checked: !!data }, props), children = _e.children, params = __rest(_e, ["children"]);
    if (InputTag) {
        return react_1.default.createElement(InputTag, __assign({ ref: inputRef, children: children }, params));
    }
    return react_1.default.createElement("input", __assign({ ref: inputRef }, params));
};
exports.default = CustomInput;
//# sourceMappingURL=customInput.js.map