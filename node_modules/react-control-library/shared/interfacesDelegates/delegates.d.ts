import { DetailMode } from "../../form/detailMode";
import { IValidationProps } from "./controlInterfaces";
import { IChangeInputEvent, IDetail, IFocusInputEvent, IKeyboardInputEvent, IToValue, IToValueWithCursor } from "./eventInterfaces";
export declare type ICustomEventDelegate = IChangeInputEvent | IFocusInputEvent | IKeyboardInputEvent;
export declare type changeDelegate = (e: IChangeInputEvent, data: any, setData: (data: any) => void, onChangeCB: (e: IChangeInputEvent) => void, validation: IValidationProps, detailModes: DetailMode[], props: any, extractValueToValidate: undefined | ((value: any) => string), setControlHasError: (boolean: any) => void, extractValueToSet?: (e: IChangeInputEvent, value: string) => IToValue | IToValueWithCursor) => void;
export declare type keyPressDelegate = (e: IKeyboardInputEvent, validation: IValidationProps, onKeyPressCB: any, props: any, extractValueToValidate: any) => void;
export declare type blurDelegate = (e: IFocusInputEvent, data: any, setData: any, onBlurCB: any, validation: IValidationProps, detailModes: DetailMode[], props: any, extractValueToValidate: any, setControlHasError: (boolean: any) => void, extractValueToSet?: (e: IFocusInputEvent, value: string) => IToValue | IToValueWithCursor) => void;
export declare type validateDelegate = (validation: IValidationProps, detail: IDetail | null | undefined, value: any, props: any) => (IDetail | null);
