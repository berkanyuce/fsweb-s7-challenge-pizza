"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var type_check_utility_1 = require("type-check-utility");
var formRegex_1 = __importDefault(require("../form/formRegex"));
var constants_1 = __importDefault(require("./constants"));
function isValidChar(e, numberMask) {
    var key = e === null || e === void 0 ? void 0 : e.key;
    if (isSpecialCase()) {
        switch (e.key) {
            case numberMask.decimalSymbol:
                if (numberMask.decimalLimit <= 0)
                    return false;
                break;
            case constants_1.default.keyboard.hyphen:
                if (e.target.selectionStart !== 0 || !numberMask.negativeAllowed)
                    return false;
                break;
        }
        return true;
    }
    var validChar = formRegex_1.default.number().test(key);
    if (!validChar)
        return false;
    return true;
    function isSpecialCase() {
        return key === numberMask.decimalSymbol || key === constants_1.default.keyboard.hyphen;
    }
}
function getNegativeSymbol(data, numberMask) {
    if (type_check_utility_1.isNotDefinedOrEmpty(data))
        return '';
    if (numberMask.negativeAllowed) {
        if (data.startsWith(constants_1.default.keyboard.hyphen))
            return constants_1.default.keyboard.hyphen;
    }
    return '';
}
function extractPureValue(data, numberMask) {
    if (!type_check_utility_1.isDefined(data))
        return data;
    var result = '';
    for (var i = 0; i < data.length; i++) {
        var d = data[i];
        if (numberMask.decimalLimit > 0 && d === numberMask.decimalSymbol) {
            result += d;
            continue;
        }
        if (!formRegex_1.default.number().test(d))
            continue;
        result += d;
    }
    var negSymbol = getNegativeSymbol(data, numberMask);
    result = "" + negSymbol + result;
    return result;
}
function addCommas(value, numberMask) {
    if (!type_check_utility_1.isNotDefinedOrEmpty(numberMask.prefix)) {
        if (value.startsWith(numberMask.prefix)) {
            value = value.substring(numberMask.prefix.length);
        }
    }
    if (!type_check_utility_1.isNotDefinedOrEmpty(numberMask.suffix)) {
        if (value.endsWith(numberMask.suffix)) {
            value = value.substring(0, value.length - numberMask.suffix.length);
        }
    }
    if (type_check_utility_1.isNotDefinedOrEmpty(numberMask.thousandsSeparatorSymbol)) {
        return value;
    }
    var negSymbol = getNegativeSymbol(value, numberMask);
    value = negSymbol + value.replace(/\D/g, "");
    return value.replace(/\B(?=(\d{3})+(?!\d))/g, numberMask.thousandsSeparatorSymbol);
}
function replaceDecimalSymbols(value, numberMask) {
    if (!value.includes(numberMask.decimalSymbol))
        return value;
    var symbol = numberMask.decimalSymbol === '.' ? '\\.' : numberMask.decimalSymbol;
    var gr = new RegExp(symbol, 'g');
    if (numberMask.decimalLimit <= 0) {
        return value.replace(gr, '');
    }
    var firstSymbolIndex = value.indexOf(numberMask.decimalSymbol) + 1;
    var replace1 = value.substr(0, firstSymbolIndex);
    var part2 = value.slice(firstSymbolIndex);
    var replace2 = part2.replace(gr, '');
    var resultStr = "" + replace1 + replace2;
    return resultStr;
}
function toNumberMaskWithCursor(e, numberMask) {
    var value = e.target.value;
    var cursorStart = e.target.selectionStart;
    var cursorEnd = e.target.selectionEnd;
    if (type_check_utility_1.isNotDefinedOrWhiteSpace(value))
        return { value: value, cursorStart: cursorStart, cursorEnd: cursorEnd };
    value = replaceDecimalSymbols(value, numberMask);
    var originalLength = value.length;
    value = addCommasAndRemoveNonDigits(value, numberMask);
    value = moveNegativeSymbol(value, numberMask);
    cursorStart = updateCursor(value, cursorStart, originalLength, numberMask);
    return { value: value, cursorStart: cursorStart, cursorEnd: cursorStart };
}
function addCommasAndRemoveNonDigits(value, numberMask) {
    if (!value.includes(numberMask.decimalSymbol))
        return addCommas(value, numberMask);
    var decimalPosition = value.indexOf(numberMask.decimalSymbol);
    var lhsOfDecimal = value.substring(0, decimalPosition);
    var rhsOfDecimal = value.substring(decimalPosition + 1);
    lhsOfDecimal = addCommas(lhsOfDecimal, numberMask);
    rhsOfDecimal = extractPureValue(rhsOfDecimal, numberMask);
    rhsOfDecimal = rhsOfDecimal.substring(0, numberMask.decimalLimit);
    return "" + lhsOfDecimal + numberMask.decimalSymbol + rhsOfDecimal;
}
function updateCursor(value, cursorStart, originalLength, numberMask) {
    var updatedLength = value.length;
    cursorStart = updatedLength - originalLength + cursorStart;
    if (originalLength === 1 && !type_check_utility_1.isNotDefinedOrEmpty(numberMask.suffix)) {
        cursorStart = cursorStart - numberMask.suffix.length;
    }
    return cursorStart;
}
function moveNegativeSymbol(value, numberMask) {
    if (type_check_utility_1.isNotDefinedOrEmpty(value))
        return value;
    var negSymbol = getNegativeSymbol(value, numberMask);
    if (!type_check_utility_1.isNotDefinedOrEmpty(negSymbol)) {
        value = value.substring(1);
    }
    if (value === numberMask.decimalSymbol) {
        value = "0" + value;
    }
    return "" + negSymbol + numberMask.prefix + value + numberMask.suffix;
}
function toNumberMask(value, numberMask) {
    if (type_check_utility_1.isNotDefinedOrEmptyObject(numberMask)) {
        return { value: value };
    }
    var pureValue = extractPureValue(value, numberMask);
    return { value: addCommas(pureValue, numberMask) };
}
function updateEventArgs(e, toNumberMaskResult) {
    e.target.value = toNumberMaskResult.value;
    e.target.selectionStart = toNumberMaskResult.cursorStart;
    e.target.selectionEnd = toNumberMaskResult.cursorEnd;
}
function updateDetail(e, numberMask) {
    var _a;
    var value = (_a = e === null || e === void 0 ? void 0 : e.detail) === null || _a === void 0 ? void 0 : _a.value;
    if (!value)
        return;
    var pureValue = extractPureValue(value, numberMask);
    e.detail.value = pureValue;
}
var numberMaskUtility = { toNumberMaskWithCursor: toNumberMaskWithCursor, updateEventArgs: updateEventArgs, toNumberMask: toNumberMask, updateDetail: updateDetail, extractPureValue: extractPureValue, isValidChar: isValidChar };
exports.default = numberMaskUtility;
//# sourceMappingURL=numberMaskUtility.js.map