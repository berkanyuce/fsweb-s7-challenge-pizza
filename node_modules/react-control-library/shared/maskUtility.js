"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var type_check_utility_1 = require("type-check-utility");
var utility_1 = __importDefault(require("./utility"));
function extractConstFromMask(mask) {
    if (type_check_utility_1.isNotDefinedOrEmptyObject(mask))
        return [];
    return mask.filter(function (m) { return !type_check_utility_1.isRegex(m); });
}
function extractPureValue(data, mask) {
    if (!type_check_utility_1.isDefined(data) || mask.length === 0)
        return data;
    var regexps = mask.filter(function (n) { return type_check_utility_1.isRegex(n); });
    var result = '';
    var di = 0;
    for (var ri = 0; (ri < regexps.length && di < data.length); ri++) {
        var regex = regexps[ri];
        var val = data[di];
        if (regex.test(val)) {
            result += val;
        }
        else {
            ri--;
        }
        di++;
    }
    return result;
}
function toMaskWithCursor(e, mask) {
    var _a = utility_1.default.cursor(e), cursorStart = _a.cursorStart, cursorEnd = _a.cursorEnd;
    var currentValue = e.target.value;
    var pureValue = extractPureValue(currentValue, mask) || '';
    var result = pureValue || '';
    if (mask.length === 0) {
        return { value: result, cursorStart: cursorStart, cursorEnd: cursorEnd };
    }
    var cursorJump = 0;
    for (var i = 0; i < result.length; i++) {
        var m = mask[i];
        if (m === undefined)
            break;
        if (!type_check_utility_1.isRegex(m) && m !== result[i]) {
            result = utility_1.default.insertAt(result, m, i);
            if (currentValue[i] !== m && i <= cursorStart)
                cursorJump = (cursorJump + 1);
        }
    }
    return { value: result, cursorStart: cursorStart + cursorJump, cursorEnd: cursorEnd + cursorJump };
}
function toMask(value, mask) {
    if (mask.length === 0) {
        return { value: value };
    }
    var currentValue = value;
    var pureValue = extractPureValue(currentValue, mask);
    var result = pureValue || '';
    for (var i = 0; i < result.length; i++) {
        var m = mask[i];
        if (m === undefined)
            break;
        if (!type_check_utility_1.isRegex(m) && m !== result[i]) {
            result = utility_1.default.insertAt(result, m, i);
        }
    }
    return { value: result };
}
function updateEventArgs(e, toMaskResult) {
    e.target.value = toMaskResult.value;
    e.target.selectionStart = toMaskResult.cursorStart;
    e.target.selectionEnd = toMaskResult.cursorEnd;
}
function updateDetail(e, mask) {
    var _a;
    var value = (_a = e === null || e === void 0 ? void 0 : e.detail) === null || _a === void 0 ? void 0 : _a.value;
    if (!value)
        return;
    var pureValue = extractPureValue(value, mask);
    e.detail.value = pureValue;
}
var maskUtility = { toMaskWithCursor: toMaskWithCursor, updateEventArgs: updateEventArgs, toMask: toMask, updateDetail: updateDetail, extractPureValue: extractPureValue, extractConstFromMask: extractConstFromMask };
exports.default = maskUtility;
//# sourceMappingURL=maskUtility.js.map